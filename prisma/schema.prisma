// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  walletAddress String         @unique
  excludedUntil DateTime?      @db.Timestamptz
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  messages      Message[]
  transactions  Transactions[]
  gameHistory   GameHistory[]
  referrer      Affiliates?    @relation("Referrer")
  affiliate     Affiliates?    @relation("Redeemers", fields: [affiliateId], references: [id])
  affiliateId   String?
  redeemedCode  String?
  userSettings  UserSettings?
  tokens        Tokens?
  nfts          Nfts[]
  lootboxes     Lootbox[]
}

model UserSettings {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hideStats     Boolean  @default(false)
  isAnonymous   Boolean  @default(false)
  soundEffects  Boolean  @default(true)
  notifications Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
}

model Profile {
  id              String   @id @default(uuid())
  userName        String?  @unique
  level           Int      @default(1)
  xp              Int      @default(0)
  gamesPlayed     Int      @default(0)
  gamesWon        Int      @default(0)
  gamesLost       Int      @default(0)
  winRatio        Float    @default(0)
  lootboxesOpened Int      @default(0)
  totalWagered    Decimal  @default(0)
  netProfit       Decimal  @default(0)
  twitterLink     String?
  discordLink     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
}

model Tokens {
  id         String   @id @default(uuid())
  amount     Decimal  @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dropChance Decimal?
  User       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  lootbox    Lootbox  @relation(fields: [lootboxId], references: [id])
  lootboxId  String   @unique
}

model Nfts {
  id          String   @id @default(uuid())
  mintAddress String   @unique
  name        String   @unique
  symbol      String
  url         String
  price       Decimal
  dropChance  Decimal?
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  lootbox     Lootbox  @relation(fields: [lootboxId], references: [id])
  lootboxId   String   @unique
}

model Lootbox {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  openedCount Int         @default(0)
  deleted     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  liveDrops   LiveDrops[]
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  tokens      Tokens?
  nft         Nfts?
}

model Transactions {
  id          Int                @id @default(autoincrement())
  type        TransactionType
  hash        String?            @unique
  coinsAmount Decimal?
  nftName     String?
  status      TransactionStatus? @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id])
  userId      String
}

model GameHistory {
  id        Int      @id @default(autoincrement())
  gameType  GameType
  date      DateTime @default(now())
  betAmount Decimal
  winning   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // TODO: add winnings field (either token, or NFT name/address), maybe a foreign on the items
}

model LiveDrops {
  id        String   @id @default(uuid())
  lootbox   Lootbox  @relation(fields: [lootboxId], references: [id])
  lootboxId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  message   String
  likedBy   String[] @default([])
  repliedTo String? //Still a messageId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Affiliates {
  id                  String   @id @default(uuid())
  referralCode        String   @unique @default(uuid())
  redeemedCount       Int      @default(0)
  totalWagered        Decimal  @default(0)
  referralEarnings    Decimal  @default(0)
  availableCommission Decimal  @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  referrer            User     @relation("Referrer", fields: [referrerId], references: [id])
  referrerId          String   @unique
  redeemers           User[]   @relation("Redeemers")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  APPROVED
  DECLINED
}

enum GameType {
  LOOTBOXES
  CLASSIC
}
